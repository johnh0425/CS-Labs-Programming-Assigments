The following functions are the minimum requirements for the AVL class. You can add any function from Assignment 2 to this class. You should modify the BSTree insert function so that the tree remains balanced after each insertion.

Required Public Member Functions
void insert(const string &): Insert an item to the binary search tree and perform rotation if necessary.
int balanceFactor(Node*): Return the balance factor of a given node.
void printBalanceFactors(): Traverse and print the tree in inorder notation. Print the string followed by its balance factor in parentheses followed by a , and one space.
void visualizeTree(const string &): Generate dotty file and visualize the tree using dotty program. Call this function before and after rotation.
Recommended Private Helper Functions
These helper functions are recommended, but you can change them or add other helper functions if necessary.

findUnbalancedNode: Find and return the closest unbalanced node (with balance factor of 2 or -2) to the inserted node.
rotate: Implement four possible imbalance cases and update the parent of the given node.
rotateLeft: Rotate the subtree to left at the given node and returns the new subroot.
rotateRight: Rotate the subtree to right at the given node and returns the new subroot.
void printBalanceFactors(Node *)
void visualizeTree(ofstream &, Node *)
