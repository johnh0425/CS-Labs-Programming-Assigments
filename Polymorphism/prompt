Derived Classes
Warrior
Stores the warrior's allegiance as a string.

The warrior does not attack warriors that have the same allegiance.

The damage done by the warrior is the percentage of the warrior's health remaining (health / MAX_HEALTH) multiplied by the warrior's attack strength.

Elf
Stores the elf's family name as a string.

The elf does not attack elf's from its own family.

The damage done by the elf is the percentage of the elf's health remaining (health / MAX_HEALTH) multiplied by the elf's attack strength.

Wizard
Stores the wizard's rank as an int.

When a wizard attacks another wizard, the damage done is the wizard's attack strength multiplied by the ratio of the attacking wizard's rank over the defending wizard's rank.

The damage done to non-wizards is just the attack strength. The wizard's health is not taken into consideration.

Dynamic casting type of Character in attack function
In order to access the Warrior data field allegiance using the Character reference passed in to the attack function, you will need to dynamic cast the Character reference to a Warrior reference.

Here's an example of dynamic casting a Character reference named opponent to a Warrior reference named opp:

Warrior &opp = dynamic_cast<Warrior &>(opponent);
You will need to do the same for the Wizard and Elf attack functions, only dynamic casting to Wizard or Elf reference instead.

CharType
Notice the enum declaration above the Character class declaration. This creates a special type called CharType that has the values, WARRIOR, ELF, and WIZARD. Those are the values you store in a variable of type CharType. For example, you can initialize a variable of type CharType and set it to the value of WARRIOR like this:

CharType type = WARRIOR;
You can compare a variable named t of type CharType to one of the CharType values like this:

if (t == WARRIOR) {
   // do something based on t being a warrior
}
